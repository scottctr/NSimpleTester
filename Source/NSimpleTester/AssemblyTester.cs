#region Copyright (c) 2019 Scott L. Carter
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// associated documentation files (the "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to 
// the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or substantial
// portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace NSimpleTester
{
    public class AssemblyTester
    {
        private readonly List<Type> _types = new List<Type>();
        private readonly ITypeFactory _typeFactory;
        private readonly List<Type> _excludedClasses = new List<Type>();

        private readonly Dictionary<Type, List<MethodSignature>> _excludedConstructors =
            new Dictionary<Type, List<MethodSignature>>();

        private readonly List<Type> _excludedEqualityTests = new List<Type>();
        private readonly List<Type> _excludedMappedProperties = new List<Type>();
        private readonly Dictionary<Type, List<string>> _excludedProperties = new Dictionary<Type, List<string>>();
        private bool _excludeConstructorTests;
        private bool _excludeEqualityTests;
        private bool _excludePropertyTests;

        public AssemblyTester(Assembly assembly) : this(assembly, new TypeFactory())
        { }

        public AssemblyTester(Assembly assembly, ITypeFactory typeFactory)
        {
            if (assembly is null)
            { throw new ArgumentNullException(nameof(assembly)); }

            _typeFactory = typeFactory ?? throw new ArgumentNullException(nameof(typeFactory));

            // NOTE: (t.IsSealed && t.IsAbstract) is static class. Opened issue to support static properties in the future.
            _types.AddRange(assembly.GetTypes()
               .Where(t =>
                    !t.IsInterface
                 && !(t.IsSealed && t.IsAbstract)
                 && t.Name != "AutoGeneratedProgram"
                 && !(t.Namespace != null && t.Namespace.StartsWith("JetBrains"))));
        }

        /// <summary>
        /// Prevents executing tests on a class.
        /// </summary>
        /// <param name="className">The name of the class to exclude from testing.</param>
        /// <returns></returns>
        public AssemblyTester ExcludeClass(string className)
        {
            var classType = findClass(className);

            _excludedClasses.Add(classType);

            return this;
        }

        public AssemblyTester ExcludeConstructor(string className, MethodSignature parameters)
        {
            var classType = findClass(className);

            if (!_excludedConstructors.TryGetValue(classType, out var constructorList))
            { _excludedConstructors.Add(classType, new List<MethodSignature> { parameters }); }
            else
            { constructorList.Add(parameters); }

            return this;
        }

        public AssemblyTester ExcludeConstructorTests()
        {
            _excludeConstructorTests = true;

            return this;
        }

        public AssemblyTester ExcludeEqualityTests()
        {
            _excludeEqualityTests = true;

            return this;
        }

        public AssemblyTester ExcludeEqualityTests(string className)
        {
            var classType = findClass(className);

            if (!_excludedEqualityTests.Contains(classType))
            { _excludedEqualityTests.Add(classType); }

            return this;
        }

        public AssemblyTester ExcludeMappedProperties(string className)
        {
            var classType = findClass(className);

            if (!_excludedMappedProperties.Contains(classType))
            { _excludedMappedProperties.Add(classType); }

            return this;
        }

        /// <summary>
        /// Excludes testing a specific property on a class
        /// </summary>
        /// <param name="className">Name of the class with the property to exclude.</param>
        /// <param name="propertyName">Name of the property to exclude.</param>
        /// <returns></returns>
        public AssemblyTester ExcludeProperty(string className, string propertyName)
        {
            var classType = findClass(className);

            if (!_excludedProperties.TryGetValue(classType, out var propertyList))
            { _excludedProperties.Add(classType, new List<string> { propertyName }); }
            else
            { propertyList.Add(propertyName); }

            return this;
        }

        /// <summary>
        /// Prevents testing property setters and getters on all classes in the assembly.
        /// </summary>
        /// <returns></returns>
        public AssemblyTester ExcludePropertyTests()
        {
            _excludePropertyTests = true;

            return this;
        }

        /// <summary>
        /// Tests all classes in the assembly.
        /// </summary>
        /// <param name="errorList">Optional list to add errors to. If not provided, errors will throw exceptions and end testing.</param>
        /// <returns></returns>
        public bool TestAssembly(IList<string> errorList = null)
        {
            foreach (var type in _types)
            { testClass(type, errorList); }

            return errorList is null || !errorList.Any();
        }

        private Type findClass(string className)
        {
            var classType = _types.FirstOrDefault(t => string.Equals(t.Name, className, StringComparison.CurrentCultureIgnoreCase));

            if (classType is null)
            { throw new ArgumentException($"Unable to find type '{className}'."); }

            return classType;
        }

        private void testClass(Type type, IList<string> errorList)
        {
            if (_excludedClasses.Contains(type)) { return; }

            if (!_typeFactory.CanCreateInstance(type))
            { ErrorHandler.Handle(errorList, $"Unable to create instance of {type.Name}. Consider excluding."); }

            var instance = _typeFactory.CreateRandomValue(type);
            var tester = new ClassTester(instance, _typeFactory);

            if (!_excludeConstructorTests)
            {
                if (_excludedConstructors.ContainsKey(type))
                { _excludedConstructors[type].ForEach(c => tester.IgnoredConstructors.Add(c)); }

                tester.TestConstructors(!_excludedMappedProperties.Contains(type), errorList);
            }

            if (!_excludePropertyTests)
            {
                if (_excludedProperties.ContainsKey(type))
                { _excludedProperties[type].ForEach(p => tester.IgnoredProperties.Add(p)); }

                tester.TestProperties(errorList);
            }

            if (!_excludeEqualityTests
             && !_excludedEqualityTests.Contains(type)
             && type.IsEqualsOverridden())
            {
                tester.TestEquality(errorList);
            }
        }
    }
}